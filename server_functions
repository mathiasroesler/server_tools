#!/bin/bash

SERVER_FILE=$HOME/.servers
NB_SERVERS=$(wc -l < $SERVER_FILE)
NAME=`basename $0`

function set_connection_params() {
	# Set the connection server, port and options.
	#
	# If the number of the server is not available, an error is raised.
	# Arguments: 
	# $1 -- the number of the server.
	# Returns:
	#

	int_check $1
	server_check $1

	server_params=$(sed "${1}q;d" $SERVER_FILE)
	readarray -d " " -t params<<<${server_params} # Parse line.
	server=${params[0]}
	port_number=${params[1]}
	options=${params[@]:2}


return 0
}


function print_info() {
	# Prints the connection information.
	#
	# Arguments:
	# Returns:
	#
	printf "Server: "
	echo $server
	printf "Port: "
	echo $port_number

	# Print options if not empty.
	if [[ -n $options ]]; then
		printf "Options: "
		echo $options
	fi

	# Print files if not empty.
	if [[ -n $files ]]; then
		printf "Source: "
		echo $files
	fi

	# Print destination if not empty.
	if [[ -n $destination ]];then
		printf "Destination: "
		echo $destination
	fi

return 0
}


function available_servers() {
	# Prints the available servers in the server file.
	#
	# Arguments:
	# Returns:
	#
	cpt=1

	while read line
	do
		readarray -d " " -t word<<<${line}
		echo "   $cpt: ${word[0]}"
		cpt=$((cpt+1))
	done < $SERVER_FILE

return 0
}


function int_check() {
	# Checks if the argument is an integer.
	#
	# Arguments:
	# $1 -- int
	# Returns:
	#
	if [[ ! $1 =~ ^[0-9]+$ ]]; then
		echo "$NAME: server argument must be an integer."
		echo "Try '$NAME -h' for help."
		exit 1
	fi

return 0
}

function server_check() {
	# Checks if the provide server is a valid choice.
	#
	# Arguments:
	# $1 -- int
	# Returns:
	#
	if [[ $1 -gt $NB_SERVERS ]]; then
		echo "$NAME: invalid server choice."
		echo "Available servers:"
		available_servers
		exit
	fi

return 0
}
