#!/bin/bash

#########################################################
### Helper functions.                      		#
### Last modified: 02/2021		   		#
### Author: Mathias Roesler		   		#
### Contact: mathias.roesler@univ-reims.fr 		#
#########################################################


#######################################
########### SETUP FUNCTIONS ###########
#######################################


function define_const() {
	# Defines the constants values of the script.
	# 
	# Arguments:
	# Returns:
	#
	NAME=`basename $0`

	if [[ ! -f $HOME/.servers ]]; then
		echo "Server file not found."
		echo "Creating server file at $HOME."
		echo ""
		touch $HOME/.servers
	fi

	SERVER_FILE=$HOME/.servers
	NB_SERVERS=$(wc -l < $SERVER_FILE)
	SERVER=true

return 0
}


function set_connection_params() {
	# Set the connection server, port and options.
	#
	# If the number of the server is not available, an error is raised.
	# Arguments: 
	# $1 -- server name or number.
	# Returns:
	#

	server_check $1

	# Read the params from file if not specified by user.
	if [[ $SERVER == false ]]; then
		server_params=$(sed "${1}q;d" $SERVER_FILE)
		readarray -d " " -t params<<<${server_params} # Parse line.

		server=${params[0]}

		if [[ $PORT == false ]]; then
			port_number=${params[1]}
		fi

		if [[ $OPTION == false ]]; then
			options=${params[@]:2}
		fi

	else
		server=$1

		if [[ $PORT == false ]]; then
			port_number=22
		fi
	fi

return 0
}


#########################################
##### SERVER FILE EDITING FUNCTIONS #####
#########################################

function set_mod_params() {
	# Set the parameters for modifying the server list.
	#
	# Arguments:
	# Returns:
	#
	if [[ -z $port_number ]]; then
		port_number=22
	fi

	if [[ -z $options ]]; then
		server_params="$server $port_number"

	else
		server_params="$server $port_number $options"
	fi

return 0
}

function add_server() {
	# Adds a server to the server list.
	#
	# Arguments:
	# Returns:
	#

	server_check $server
	set_mod_params

	is_present=$(cat $SERVER_FILE | grep -E "^$server_params$")
	echo "Selected server: $server_params"

	if [[ -n $is_present ]]; then
		echo "Server with specified parameters is already present in the list."
		exit 0

	else
		write_server_params "$server_params"
		exit 0
	fi

return 0
}


function write_server_params() {
	# Edits the server list.
	# Arguments:
	# $1 -- server_params
	# Returns:
	#
	echo "Writting to server file."
	echo "$1" >> $SERVER_FILE
	echo "Done."
	NB_SERVERS=$((NB_SERVERS+1))
	print_available_servers "long"

return 0
}


function delete_server() {
	# Deletes selected server from server list.
	#
	# Arguments:
	# Returns: 
	#	
	server_check $server
	set_mod_params

	# If the specified server was an integer.
	if [[ $SERVER == false ]]; then
		server_params=$(sed "${server}q;d" $SERVER_FILE)
	fi

	echo "Selected server: $server_params"

	is_present=$(cat $SERVER_FILE | grep -E "^$server_params$")

	if [[ -z $is_present ]]; then
		echo "Server with specified parameters is not present in the list."
		exit 0

	else
		echo "Server with specified parameters is present in the list."

		while :
		do
			echo "Do you want to delete it? (y/n)"
			read answer

			case $answer in
				y)
					erase_server_params "$server_params"
					exit 0
					;;
				n)
					exit 0
					;;
				?)
					if [[ -z $answer ]]; then
						erase_server_params "$server_params"
						exit 0
					else
						echo "Invalid response."
					fi
			esac
		done
	fi

return 0
}


function erase_server_params() {
	# Edits the server list.
	#
	# Arguments:
	# $1 -- server_params
	# Returns:
	#
	if [[ $SERVER == false ]]; then
		sed -i "${server}d" $SERVER_FILE
	
	else
		cpt=1

		while read line
		do
			if [[ $line == $1 ]]; then
				sed -i "${cpt}d" $SERVER_FILE
			fi
			cpt=$((cpt+1))
		done < "$SERVER_FILE"
	fi

	print_available_servers "long"

return 0
}


########################################
########## PRINTING FUNCTIONS ##########
########################################


function print_options() {
	# Prints the available options.
	#
	# Arguments:
	# $1 -- recursive
	# Returns:
	#
	echo "Options:"
	echo " -h, print help."
	echo " -l, lists the available servers."
	echo " -L, lists the available servers in long format."

	if [[ $1 == true ]]; then
		echo " -r, copy directories recursively."
	fi

	echo " -a server, add specified server to the list of available servers."
	echo " -d server, delete specified server from the list of available servers -- line number of the server or full name."
	echo " -p port, specify port number -- default value 22."
	echo " -o options, specify (in quotations) the options."

return 0
}


function print_info() {
	# Prints the connection information.
	#
	# Arguments:
	# Returns:
	#
	printf "Server: "
	echo $server
	printf "Port: "
	echo $port_number

	# Print options if not empty.
	if [[ -n $options ]]; then
		printf "Options: "
		echo $options
	fi

	# Print files if not empty.
	if [[ -n $files ]]; then
		printf "Source: "
		echo $files
	fi

	# Print destination if not empty.
	if [[ -n $destination ]];then
		printf "Destination: "
		echo $destination
	fi

return 0
}


function print_available_servers() {
	# Prints the available servers in the server file.
	#
	# Arguments:
	# Returns:
	#
	echo ""
	if [[ $NB_SERVERS -eq 1 ]]; then
		echo "There is currently $NB_SERVERS available server:"

	else
		echo "There are currently $NB_SERVERS available servers:"
	fi

	cpt=1

	while read line
	do
		if [[ $1 == long ]]; then
			echo " $cpt: $line"

		else
			readarray -d " " -t word<<<${line}
			echo " $cpt: ${word[0]}"
		fi

		cpt=$((cpt+1))
	done < "$SERVER_FILE"

	echo ""

	printf "The list of servers is stored in $SERVER_FILE in the following fashion: "
	echo "username@hostname port options"
	echo "You can add a server by editing the file directly."

return 0
}

########################################
####### ERROR HANDLING FUNCTIONS #######
########################################

function error_handler() {
	# Handles errors.
	#
	# Arguments:
	# $1 -- error message.
	# Returns:
	#
	echo "$NAME: $1"
	echo "Try '$NAME -h' for more information."
	exit 1

return 0
}


function server_check() {
	# Checks if the provide server is a valid choice.
	#
	# Arguments:
	# $1 -- server number or name.
	# Returns:
	#
	if [[ $1 =~ ^[0-9]+$ ]]; then
		SERVER=false

	elif [[ ! $1 =~ ^[a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+$ ]]; then
		error_handler "the server should be in the form username@hostname."
	fi

	if [[ $SERVER == false ]]; then
		if [[ $1 -gt $NB_SERVERS ]]; then
			error_handler "invalid server choice."
		fi
	fi

return 0
}


function argument_nb_check() {
	# Checks if the right number of arguments was provided.
	#
	# Arguments:
	# $1 -- arg_nb.
	# $2 -- desired_nb.
        # Returns:
	#
	if [[ $1 -lt $2 ]]; then
		error_handler "not enough arguments."
	
	elif [[ $1 -gt $2 ]]; then
		if [[ $NAME == "remote-connection" ]]; then
			error_handler "too many arguments."
		fi
	fi

return 0
}
